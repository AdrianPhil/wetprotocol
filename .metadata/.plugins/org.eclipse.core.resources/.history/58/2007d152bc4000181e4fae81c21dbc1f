package ui;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellRenderer;

import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntProperty;

import resources.ResourceFindingDummyClass;

import java.awt.Color;
import java.awt.Component;

import javax.swing.*;

public class PropertiesCellRenderer implements TreeCellRenderer {
	JLabel localName = new JLabel(" ");
	JLabel ontProperty = new JLabel(" ");
	JLabel imageLabel = new JLabel();
	JPanel renderer = new JPanel();

	DefaultTreeCellRenderer defaultRenderer = new DefaultTreeCellRenderer();
	Color backgroundSelectionColor;
	Color backgroundNonSelectionColor;

	public PropertiesCellRenderer() {
		ImageIcon createImageIcon = ResourceFindingDummyClass.createImageIcon("pipette.png");
		Icon icon = UIManager.getIcon("Tree.leafIcon");// http://en-human-begin.blogspot.ca/2007/11/javas-icons-by-default.html
		// "FileChooser.detailsViewIcon"
		imageLabel.setIcon(createImageIcon);
		renderer.add(imageLabel);
		localName.setForeground(Color.BLACK);
		renderer.add(localName);
		ontProperty.setForeground(Color.BLACK);
		renderer.add(ontProperty);
		renderer.setBorder(null);
		backgroundSelectionColor = defaultRenderer.getBackgroundSelectionColor();
		backgroundNonSelectionColor = defaultRenderer.getBackgroundNonSelectionColor();
	}

	@Override
	public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
		Component returnValue = null;
		if ((value != null) && (value instanceof DefaultMutableTreeNode)) {
			Object userObject = ((DefaultMutableTreeNode) value).getUserObject();
			if (userObject instanceof OntProperty) {
				OntProperty ontProperty = (OntProperty) userObject;
				localName.setText(ontProperty.getLocalName());
				ontClass.setText(ontProperty.getOntClass().getLocalName());
				if (selected) {
					renderer.setBackground(backgroundSelectionColor);
				} else {
					renderer.setBackground(backgroundNonSelectionColor);
				}
				renderer.setEnabled(tree.isEnabled());
				returnValue = renderer;
			} 
		}
		if (returnValue == null) {
			UiUtils.showDialog(tree, "The value to be rendered is null. Using default renderer");
			returnValue = defaultRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
		}
		return returnValue;
	}
}
