package ui;

import ont.OntologyManager;

import org.apache.jena.ontology.Individual;
import org.apache.jena.ontology.OntClass;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import static javax.swing.WindowConstants.EXIT_ON_CLOSE;

import java.awt.*;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

public class UiUtils {

	
	/**
	 * Create the GUI and show it. For thread safety, this method should be invoked
	 * from the event-dispatching thread.
	 */
	private static void createAndShowGUI(JPanel whatPanel, String title) {
		JFrame frame = new JFrame("Wet Protocol");
		frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
		whatPanel.setOpaque(true); // content panes must be opaque
		frame.setContentPane(whatPanel);
		// Display the window.
		frame.pack();
		frame.setLocationRelativeTo(null); // *** this will center the app ***
		frame.setVisible(true);
	}
	
	public static void expandTree(JTree jTree) {
		for (int i = 0; i < jTree.getRowCount(); i++) {
			jTree.expandRow(i);
		}
	}

	public static void createClassNodes(JTree jTree, Set<OntClass> classesInSignature) {//for classChooserPanel
		//AtomicInteger counter = new AtomicInteger();
		DefaultTreeModel model = (DefaultTreeModel) jTree.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
		if (root.getChildCount() > 0) {
			return;// tree is already populated
		}
		// root.add(new DefaultMutableTreeNode(TOP_PROTOCOL));
		// DefaultTreeModel treeModel = new DefaultTreeModel(new
		// DefaultMutableTreeNode(new Operation("Protocol", "tutorial.html")));
		// classesInSignature.stream().map(owlClass ->
		// owlClass.getIRI().getFragment()).forEach(className -> {
		// DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new
		// Operation(className + " " + counter.getAndIncrement(), "tutorial.html"));
		classesInSignature.stream().forEach(ontClass -> {
			DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(ontClass);
			// model.insertNodeInto(new DefaultMutableTreeNode(new Operation(className,
			// "tutorial.html")), root, root.getChildCount());
			root.add(newNode);
		});
		model.reload(root);// todo now know if necessary
	}

	public static void createInstanceNodes(DefaultMutableTreeNode topProtocolNode) {
		DefaultMutableTreeNode firstStepNode;
		Individual myProtejeCreatedMicroCentrifugeTube = OntologyManager.getInstance().getAliqoutIndividual();
		 firstStepNode = new DefaultMutableTreeNode(myProtejeCreatedMicroCentrifugeTube);
		 topProtocolNode.add(firstStepNode);
		// JFC Swing Tutorial
		// book = new DefaultMutableTreeNode(
		// new Operation("The JFC Swing Tutorial: A Guide to Constructing GUIs",
		// "swingtutorial.html"));
		// topProtocolNode.add(book);
		// // Bloch
		// book = new DefaultMutableTreeNode(new Operation("Effective Java Programming
		// Language Guide", "bloch.html"));
		// topProtocolNode.add(book);
	}
	
	
	public static void createPropertyNodes(DefaultMutableTreeNode topPropertyNode) {
		DefaultMutableTreeNode firstStepNode;
		Individual myProtejeCreatedMicroCentrifugeTube = OntologyManager.getInstance().getAliqoutIndividual();
		 firstStepNode = new DefaultMutableTreeNode(myProtejeCreatedMicroCentrifugeTube);
		 topPropertyNode.add(firstStepNode);
		// JFC Swing Tutorial
		// book = new DefaultMutableTreeNode(
		// new Operation("The JFC Swing Tutorial: A Guide to Constructing GUIs",
		// "swingtutorial.html"));
		// topProtocolNode.add(book);
		// // Bloch
		// book = new DefaultMutableTreeNode(new Operation("Effective Java Programming
		// Language Guide", "bloch.html"));
		// topProtocolNode.add(book);
	}

//	public static void createChildNode(DefaultMutableTreeNode newChild, DefaultMutableTreeNode parent, JTree builtTree, int childPosition) {
//		parent.insert(newChild, childPosition);// needs the updateUI to work
//		// ((DefaultTreeModel)builtTree.getModel()).insertNodeInto(newChild, parent,
//		// parent.getChildCount());// this works without the updateUI
//		builtTree.updateUI();
//		// Make sure the user can see the new node.
//		builtTree.scrollPathToVisible(new TreePath(newChild.getPath()));
//	}

	public static void showDialog(Component aComponent, String message) {
		Window windowAncestor = SwingUtilities.getWindowAncestor(aComponent);
		// JDialog d = new JDialog(windowAncestor, message);
		// d.setLocationRelativeTo(windowAncestor);
		// d.setVisible(true);
		JOptionPane.showMessageDialog(windowAncestor, message, message, JOptionPane.WARNING_MESSAGE);
	}

	public static JFrame getProtocolFrame(Component c) {
		do {
			c = c.getParent();
		} while (!(c instanceof JFrame));
		return (JFrame) c;
	}
}
